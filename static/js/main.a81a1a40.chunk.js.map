{"version":3,"sources":["components/header/Header.tsx","ConstantsUtils.ts","components/contact-components/contact-context/ContactContext.tsx","components/contact-components/contact/Contact.tsx","components/contact-components/contact-list/ContactList.tsx","components/widget/text-input/TextInput.tsx","components/contact-components/contact-form/ContactForm.tsx","components/about-us/AboutUs.tsx","components/error-page/404/Error404.tsx","App.tsx","serviceWorker.ts","i18n.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","useTranslation","t","i18n","useState","i18next","language","setLanguage","languages","React","anchorEl","setAnchorEl","handleClose","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","event","currentTarget","Typography","variant","to","style","textDecoration","Button","length","changeLanguage","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","EMPTY_CONTACT","name","email","tel","ContactContext","ContactsProvider","props","currentContactId","contacts","dispatch","action","setState","state","type","console","log","payload","filter","contact","contactReducer","Provider","value","children","ContactsConsumer","Consumer","Contact","show","showContact","ExpansionPanel","expanded","onChange","display","ExpansionPanelSummary","expandIcon","aria-controls","cursor","float","ExpansionPanelDetails","List","ListItem","button","ListItemIcon","ListItemText","primary","ContactList","Container","maxWidth","map","key","TextInput","isValidSubmitInputContent","validatorPattern","test","isValidChangeInputContent","limitorPattern","FormControl","fullWidth","margin","TextField","label","required","error","submited","nValue","onChangeMutation","target","message","FormHelperText","info","ContactForm","setContact","setSubmited","inputs","limitor","validator","toUpperCase","trim","contactUpdated","isValidSubmitForm","result","forEach","input","context","Paper","noValidate","autoComplete","index","undefined","history","push","onSubmit","AboutUs","Error404","App","fallback","exact","path","component","window","location","hostname","match","resources","en","translation","fr","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"qVAcMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAQC,SAASK,IAAU,IAAD,EACXC,cAAZC,EADuB,EACvBA,EAAGC,EADoB,EACpBA,KADoB,EAGCC,mBAASC,IAAQC,UAHlB,mBAGxBA,EAHwB,KAGdC,EAHc,KAKzBC,EAAYH,IAAQG,UALK,EAiBCC,IAAML,SAAS,MAjBhB,mBAiBxBM,EAjBwB,KAiBdC,EAjBc,KAuBzBC,EAAc,WAClBD,EAAY,OAGRE,EAAUtB,IAGhB,OACE,yBAAKuB,UAAWD,EAAQnB,MAEtB,kBAACqB,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,OAAOP,UAAWD,EAAQjB,WAAY0B,QAhB9E,SAACC,GACnBZ,EAAYY,EAAMC,iBAgBV,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAMZ,UAAWD,EAAQd,OAC3C,kBAAC,IAAD,CAAM4B,GAAG,IAAIC,MAAO,CAACR,MAAQ,UAAWS,eAAiB,SAAW3B,EAAE,sBAExE,kBAAC4B,EAAA,EAAD,CAAQV,MAAM,UAAUE,QA/BP,WACnBd,EAAUuB,OAAS,IACrB5B,EAAK6B,eAAexB,EAAU,IAC9BD,EAAYC,EAAU,OA4BkCF,KAGxD,kBAAC2B,EAAA,EAAD,CACEC,GAAG,cACHxB,SAAUA,EACVyB,aAAW,EACXC,KAAMC,QAAQ3B,GACd4B,QAAS1B,GAET,kBAAC,IAAD,CAAMgB,MAAO,CAACR,MAAQ,UAAWS,eAAiB,QAAUF,GAAG,KAAK,kBAACY,EAAA,EAAD,CAAUjB,QAASV,GAAcV,EAAE,qBACvG,kBAAC,IAAD,CAAM0B,MAAO,CAACR,MAAQ,UAAWS,eAAiB,QAAUF,GAAG,QAAQ,kBAACY,EAAA,EAAD,CAAUjB,QAASV,GAAcV,EAAE,2BAC1G,kBAAC,IAAD,CAAM0B,MAAO,CAACR,MAAQ,UAAWS,eAAiB,QAAUF,GAAG,UAAU,kBAACY,EAAA,EAAD,CAAUjB,QAASV,GAAcV,EAAE,0B,YC9EvGsC,EAA2B,CAACC,KAAO,GAAIC,MAAQ,GAAIC,IAAM,ICyBhEC,EAAiBnC,gBDpBQ,ICsDxB,SAASoC,EAAiBC,GAC7B,IADsD,EAY5BrC,WACtB,CACIsC,iBAAkB,EAClBC,SAd4C,CACxC,CACId,GAAI,EACJQ,MAAO,uBACPD,KAAM,SACNE,IAAK,cAWbM,SAAU,SAACC,GACPC,GAAS,SAACC,GAAD,OA7CK,SAACA,EAA8BF,GACzD,OAAQA,EAAOG,MACX,IAAK,cAID,OAHAC,QAAQC,IAAI,cAAeH,EAAOF,GAClCA,EAAOM,QAAQtB,GAAKkB,EAAML,iBAEnB,CACHC,SAAS,CAFqBE,EAAOM,SAE7B,mBAAgBJ,EAAMJ,WAC9BC,SAAUG,EAAMH,SAChBF,mBAAoBK,EAAML,kBAElC,IAAK,iBAED,OADAO,QAAQC,IAAI,iBAAkBH,EAAOF,GAC9B,CACHF,SAAUI,EAAMJ,SAASS,QAAO,SAACC,GAAD,OAA6BA,EAAQxB,KAAOgB,EAAOM,QAAQtB,MAC3Fe,SAAUG,EAAMH,SAChBF,iBAAkBK,EAAML,kBAEhC,QACI,OAAOK,GA0ByCO,CAAeP,EAAOF,SAlBxB,mBAY/CE,EAZ+C,KAYxCD,EAZwC,KAuBtD,OACI,gBAACP,EAAegB,SAAhB,CAAyBC,MAAOT,GAC3BN,EAAMgB,UAMZ,IAAMC,EAAmBnB,EAAeoB,S,mIC9BhC,SAASC,EAAQnB,GAAiB,MAMnBrC,YAAe,GANI,mBAMxCyD,EANwC,KAMlCC,EANkC,KAqB/C,OACE,gBAACJ,EAAD,MACG,SAAAF,GACC,OACI,gBAACO,EAAA,EAAD,CAAgBC,SAAUH,EAAMI,SAAU,kBAAMH,GAAY,SAAAI,GAAO,OAAKA,OACtE,gBAACC,EAAA,EAAD,CACEC,WAAY,gBAAC,IAAD,MACZC,gBAAc,mBACdxC,GAAG,mBAEH,gBAACT,EAAA,EAAD,KAAY,gBAAC,IAAD,CAAeG,MAAO,CAAE+C,OAAQ,UAAWC,MAAO,OAAQxD,MAAO,MAAOvB,YAAc,OAAQyB,QAAS,WAlBhH,IAACoC,EAAmBT,EAAnBS,EAkBgIZ,EAlB7GG,EAkBoHY,EAAMZ,SAjBjI,qBAAhBS,EAAQxB,IAClBe,EAAS,CAAEI,KAAM,iBAAkBG,QAAS,CAAEtB,GAAIwB,EAAQxB,SAiBjDY,EAAML,OAEP,gBAACoC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAMzD,aAAW,gBACf,gBAAC0D,EAAA,EAAD,CAAUC,QAAM,GACd,gBAACC,EAAA,EAAD,KACE,gBAAC,IAAD,OAEF,gBAACC,EAAA,EAAD,CAAcC,QAASrC,EAAMH,OAE/B,gBAACoC,EAAA,EAAD,CAAUC,QAAM,GACd,gBAACC,EAAA,EAAD,KACE,gBAAC,IAAD,OAEF,gBAACC,EAAA,EAAD,CAAcC,QAASrC,EAAMJ,e,aCtGpC,SAAS0C,IAAgB,IAAD,EACjBnF,cAAZC,EAD6B,EAC7BA,EAD6B,EAC1BC,KAUX,OANAM,aAAgB,WACd6C,QAAQC,IAAI,+BAMZ,gBAACQ,EAAD,MACG,SAAAF,GACC,OACE,gBAACwB,EAAA,EAAD,CAAWC,SAAS,KAAKxE,UAAU,aACjC,sBAAIA,UAAU,aAAaZ,EAAE,qBAC5B2D,EAAMb,SAASuC,KAAI,SAAC7B,GAAD,OAChB,gBAACO,EAAD,CACIuB,IAAK9B,EAAQxB,GACbA,GAAIwB,EAAQxB,GACZO,KAAMiB,EAAQjB,KACdC,MAAOgB,EAAQhB,MACfC,IAAKe,EAAQf,a,yDCblB,SAAS8C,EAAU3C,GAAyB,IAAD,EAC5BrC,WAAeqC,EAAMe,OADO,mBAC/CT,EAD+C,KACxCD,EADwC,KAoBhDuC,EAA4B,WAC9B,OAAQ5C,EAAM6C,kBAAoB7C,EAAM6C,iBAAiBC,KAAKxC,IAO5DyC,EAA4B,SAAChC,GAC/B,OAAQf,EAAMgD,gBAAkBhD,EAAMgD,eAAeF,KAAK/B,IAG9D,OACI,gBAACkC,EAAA,EAAD,CAAaC,UAAWlD,EAAMkD,UAAWC,OAAQnD,EAAMmD,QACnD,gBAACC,EAAA,EAAD,CAAWC,MAAOrD,EAAMqD,MACpBC,SAAUtD,EAAMsD,SAChBvC,MAAOT,EACPiD,MAAOvD,EAAMwD,WAAaZ,IAC1BpB,SAAU,SAAC/C,IAhCN,SAACsC,GACd,IAAI0C,EAAiB1C,EACjBf,EAAM0D,mBACND,EAASzD,EAAM0D,iBAAiB3C,IAE/Bf,EAAMgD,gBAAoC,IAAlBS,EAAOxE,SAAgB8D,EAA0BU,KAC1EpD,EAASoD,GACTzD,EAAMwB,SAASiC,IAyBYjC,CAAS/C,EAAMkF,OAAO5C,UAEhDf,EAAM4D,QACH,gBAACC,EAAA,EAAD,CAAgBzE,GAAG,oBAAoBmE,MAAOvD,EAAMwD,WAAaZ,KAC5D5C,EAAMwD,WAAaZ,IAA8B5C,EAAM4D,QAAQL,OAASvD,EAAM4D,QAAQE,MAAQ,GAAK9D,EAAM4D,QAAQE,MAAQ,IAC1G,MChCrB,SAASC,EAAY/D,GAAsB,IAC9C5C,EAAMD,cAANC,EAD6C,EAGvBO,WAAe+B,GAHQ,mBAG9CkB,EAH8C,KAGrCoD,EAHqC,OAIrBrG,YAAe,GAJM,mBAI9C6F,EAJ8C,KAIpCS,EAJoC,KAM/CC,EAAqB,CACvB,CACIvE,KAAM,OACNwE,QAAS,aACTC,UAAW,kBACXrD,MAAOH,EAAQjB,KACf+D,iBAAkB,SAAC3C,GAAD,OAAmBA,EAAMsD,cAAcC,QACzD9C,SAAU,SAACT,GAAoBS,EAAST,EAAO,UAEnD,CACIpB,KAAM,QACNwE,QAAS,uBACTC,UAAW,qDACXrD,MAAOH,EAAQhB,MACfgE,SAAS,EACTpC,SAAU,SAACT,GAAoBS,EAAST,EAAO,WAEnD,CACIpB,KAAM,MACNwE,QAAS,8BACTC,UAAW,4BACXrD,MAAOH,EAAQf,IACf+D,SAAS,EACTpC,SAAU,SAACT,GAAoBS,EAAST,EAAO,UASjDS,EAAW,SAACT,EAAe2B,GAC7B,IAAI6B,EAAmB,eAAQ3D,GAC/B2D,EAAe7B,GAAO3B,EACtBiD,EAAWO,IAoBTC,EAAoB,WACtB,IAAIC,GAAkB,EAKtB,OAJAP,EAAOQ,SAAQ,SAACC,GACZnE,QAAQC,IAAIgE,EAAQE,EAAMhF,KAAMiB,EAAS+D,EAAMP,UAAUtB,KAAK6B,EAAM5D,QACpE0D,EAASA,GAAUE,EAAMP,UAAUtB,KAAK6B,EAAM5D,UAE3C0D,GAMX,OACI,gBAACxD,EAAD,MACK,SAAA2D,GACG,OACI,gBAACrC,EAAA,EAAD,CAAWC,SAAS,KAAKxE,UAAU,aAE/B,gBAAC6G,EAAA,EAAD,CAAO7G,UAAU,aACb,0BAAKZ,EAAE,2BACP,wBAAM0H,YAAU,EAACC,aAAa,OACzBb,EAAOzB,KAAI,SAACkC,EAAOK,GAChB,OACI,gBAACrC,EAAD,CACID,IAAKsC,EACL9B,WAAW,EACXM,SAAUA,EACVL,OAAO,SACPE,MAAOjG,EAAE,2BAAD,OAA4BuH,EAAMhF,KAAlC,iBACR2D,UAAQ,EACRvC,MAAO4D,EAAM5D,MACbS,SAAUmD,EAAMnD,SAChBwB,eAAgB2B,EAAMR,QACtBtB,iBAAkB8B,EAAMP,UACxBV,iBAAkBiB,EAAMjB,iBACxBE,QAASe,EAAMf,QAAU,CAAEE,KAAM1G,EAAE,2BAAD,OAA4BuH,EAAMhF,KAAlC,kBAAwD4D,MAAOnG,EAAE,2BAAD,OAA4BuH,EAAMhF,KAAlC,yBAA4DsF,OAI1K,gBAAChC,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,UACjC,gBAACnE,EAAA,EAAD,CACIJ,QAAQ,YACRN,MAAM,UAAUE,QAAS,YAtD5C,SAACoG,GACVJ,MACAI,EAAQzE,SAAS,CAAEI,KAAM,cAAeG,QAASE,IACjDoD,EAAWtE,GACXM,EAAMkF,QAAQC,KAAK,MAEvBlB,GAAY,GAgDqDmB,CAASR,KAEzCxH,EAAE,+C,YChI5B,SAASiI,KAAY,IAC1BjI,EAAMD,cAANC,EACR,OACE,gBAACmF,EAAA,EAAD,CAAWC,SAAS,KAAKxE,UAAU,aACjC,sBAAIA,UAAU,aAAaZ,EAAE,wBAC7B,qBAAGY,UAAU,QAAQZ,EAAE,8BACvB,qBAAGY,UAAU,UAAUZ,EAAE,yBACzB,oCAAYA,EAAE,2BCRL,SAASkI,KAAa,IAC3BlI,EAAMD,cAANC,EACR,OACE,gBAAC,WAAD,KACI,sBAAIY,UAAU,mBAAmBZ,EAAE,0BACnC,yBACGA,EAAE,iCCmBEmI,OAtBf,WACE,OACE,kBAAC,WAAD,CAAUC,SAAS,WACnB,kBAACzF,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC7C,EAAD,MACA,yBAAKc,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyH,OAAK,EAACC,KAAK,qBAAqBC,UAAWrD,IAClD,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,IAAIC,UAAWrD,IACjC,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,OAAOC,UAAW5B,IACpC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,SAASC,UAAWN,KAEtC,kBAAC,IAAD,CAAOM,UAAWL,WCVV/F,QACW,cAA7BqG,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+BCPAC,GAAY,CACdC,GAAK,CACDC,YAAcD,IAElBE,GAAK,CACDD,YAAcC,KAGtB9I,IAMK+I,IAAIC,MAEJD,IAAIE,KAGJC,KAAK,CACFP,aACAQ,YAAa,CAAC,KAAM,MACpBC,OAAO,EACPC,cAAe,CACXC,aAAa,KAGVtJ,EAAf,EC9BAuJ,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SFmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/D,GACL/C,QAAQ+C,MAAMA,EAAMK,a","file":"static/js/main.a81a1a40.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\n/**\n * The Header banner of application with Link to access all pages\n */\nexport default function Header() {\n  const { t, i18n } = useTranslation();\n  // save the curren language\n  const [language, setLanguage] = useState(i18next.language);\n  // save all languages\n  const languages = i18next.languages;\n\n  /**\n   * Funtion to change the language of application\n   */\n  const onChangeLanguage = () => {\n    if (languages.length > 1) {\n      i18n.changeLanguage(languages[1]);\n      setLanguage(languages[1]);\n    }\n  }\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event : any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const classes = useStyles();\n\n\n  return (\n    <div className={classes.root}>\n\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className={classes.menuButton} onClick={handleClick}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\"  className={classes.title}>\n            <Link to='/' style={{color : \"inherit\", textDecoration : 'none' }}>{t('application-name')}</Link>\n          </Typography>\n          <Button color=\"inherit\" onClick={onChangeLanguage}>{language}</Button>\n        </Toolbar>\n      </AppBar>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Link style={{color : \"inherit\", textDecoration : 'none' }} to='/' ><MenuItem onClick={handleClose}>{t('pages.home.link')}</MenuItem></Link>\n        <Link style={{color : \"inherit\", textDecoration : 'none' }} to='/add' ><MenuItem onClick={handleClose}>{t('pages.addContact.link')}</MenuItem></Link>\n        <Link style={{color : \"inherit\", textDecoration : 'none' }} to='/about' ><MenuItem onClick={handleClose}>{t('pages.aboutUs.link')}</MenuItem></Link>\n      </Menu>\n\n    </div>\n\n  );\n}\n\n","import { IContact } from \"./components/contact-components/contact/Contact\";\n\n/**\n * Empty Contact constant\n */\nexport const EMPTY_CONTACT : IContact = {name : '', email : '', tel : ''};\n\n/**\n * Empty any constant\n */\nexport const EMPTY_ANY : any = {};","import * as React from 'react';\nimport { EMPTY_ANY } from '../../../ConstantsUtils';\nimport { IContactWithId } from '../contact/Contact';\n\n/**\n * Context Interface\n * The Action interface to explain the payload format\n * key id to DELETE action\n * keys name, email, tel to ADD action\n */\nexport interface IContactsContextAction {\n    type : string,\n    payload : {\n        name? : string,\n        email? : string,\n        tel? : string,\n        id? : number\n    }\n}\n\n/**\n * Context Interface\n * The State interface to explain the Context state content\n */\nexport interface IContactsContextState {\n    currentContactId : number,\n    contacts : Array<IContactWithId>,\n    dispatch : any\n}\n\nconst ContactContext = React.createContext(EMPTY_ANY);\n\n/**\n * The reducer function to interact with context state\n * @param state The state of context\n * @param action The data passed to interact with context\n */\nexport const contactReducer = (state: IContactsContextState, action: IContactsContextAction) => {\n    switch (action.type) {\n        case 'ADD_CONTACT':\n            console.log('add clicked', state, action);\n            action.payload.id = state.currentContactId;\n            const nContact : IContactWithId = action.payload as IContactWithId;\n            return {\n                contacts: [nContact, ...state.contacts],\n                dispatch: state.dispatch,\n                currentContactId: ++state.currentContactId\n            }\n        case 'DELETE_CONTACT':\n            console.log('delete clicked', state, action);\n            return {\n                contacts: state.contacts.filter((contact: IContactWithId) => contact.id !== action.payload.id),\n                dispatch: state.dispatch,\n                currentContactId: state.currentContactId\n            }\n        default:\n            return state;\n    }\n};\n\n/**\n * The Provider component to defined the context content\n * @param props The props object to interact with context content \n */\nexport function ContactsProvider(props: {children : any}) {\n    const listDefaultContacts : Array<IContactWithId> = [\n                {\n                    id: 0,\n                    email: 'jean.dupont@email.fr',\n                    name: 'Dupont',\n                    tel: '012345689'\n                }\n            ];\n    /**\n     * State of context with default values\n     */\n    const [state, setState] = React.useState(\n        {\n            currentContactId: 1,\n            contacts: listDefaultContacts,\n            // fonction to write in context\n            dispatch: (action: IContactsContextAction) => {\n                setState((state : IContactsContextState) => contactReducer(state, action));\n            }\n        }\n    );\n    // Context Provider component render\n    return (\n        <ContactContext.Provider value={state}>\n            {props.children}\n        </ContactContext.Provider>\n    );\n}\n\n// The Consumer of context to read context state content\nexport const ContactsConsumer = ContactContext.Consumer;\n","import * as React from 'react';\nimport { ContactsConsumer } from '../contact-context/ContactContext';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\n\n/**\n * The Contact interface with optional id\n * To manipulate Contact before creation\n */\nexport interface IContact {\n  /**\n   * The name of Contact\n   */\n  name: string,\n  /**\n   * The email of contact\n   */\n  email: string,\n  /**\n   * The telephone number of Contact\n   */\n  tel: string,\n  /**\n   * The id of Contact (assigned by context dispatcher)\n   */\n  id?: number\n}\n\n/**\n* The Contact interface with mandatory id \n* To manipulate Contact after creation\n*/\nexport interface IContactWithId {\n  /**\n   * The name of Contact\n   */\n  name: string,\n  /**\n   * The email of contact\n   */\n  email: string,\n  /**\n   * The telephone number of Contact\n   */\n  tel: string,\n  /**\n   * The id of Contact (assigned by context dispatcher)\n   */\n  id: number\n}\n\n/**\n * The component to display Contact card item\n * @param props The contact object content\n */\nexport default function Contact(props: IContact) {\n  /**\n   * The display state \n   * true show content card\n   * false hide content card\n   */\n  const [show, showContact] = React.useState(false);\n\n  /**\n   * Function to delete a contact in list\n   * @param contact The contact object content \n   * @param dispatch The function to interact with context, to delete contact in context state\n   */\n  const onDelete = (contact: IContact, dispatch: Function) => {\n    if (typeof (contact.id) !== 'undefined') {\n      dispatch({ type: 'DELETE_CONTACT', payload: { id: contact.id } });\n    }\n  };\n  /**\n   * render of component with ContactContext closure\n   */\n  return (\n    <ContactsConsumer>\n      {value => {\n        return (\n            <ExpansionPanel expanded={show} onChange={() => showContact(display => !display)}>\n              <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1bh-content\"\n                id=\"panel1bh-header\"\n              >\n                <Typography><DeleteOutline style={{ cursor: 'pointer', float: 'left', color: 'red', marginRight : '1em'}} onClick={() => { onDelete(props, value.dispatch) }}/>\n              {props.name}</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                  <List aria-label=\"main contact\">\n                    <ListItem button>\n                      <ListItemIcon>\n                        <PhoneIcon />\n                      </ListItemIcon>\n                      <ListItemText primary={props.tel} />\n                    </ListItem>\n                    <ListItem button>\n                      <ListItemIcon>\n                        <DraftsIcon />\n                      </ListItemIcon>\n                      <ListItemText primary={props.email} />\n                    </ListItem>\n                  </List>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n      }}\n    </ContactsConsumer>\n  );\n}\n","import * as React from 'react';\nimport Contact, { IContactWithId } from '../contact/Contact';\nimport { ContactsConsumer } from '../contact-context/ContactContext';\nimport { useTranslation } from 'react-i18next';\nimport Container from '@material-ui/core/Container';\n\n/**\n * The Contact List component to display all contact\n */\nexport default function ContactList () {\n  const { t, i18n } = useTranslation();\n  /**\n   * Hook function to print in log after component creation\n   */\n  React.useEffect(() => {\n    console.log('The component is mounted');\n  });\n  /**\n   * The render of Contact List component with context closure\n   */\n  return (\n    <ContactsConsumer>\n      {value => {\n        return (\n          <Container maxWidth=\"sm\" className='padding-1'>\n            <h1 className='display-5'>{t('pages.home.title')}</h1>\n            {value.contacts.map((contact: IContactWithId) => (\n                <Contact \n                    key={contact.id}\n                    id={contact.id}\n                    name={contact.name}\n                    email={contact.email}\n                    tel={contact.tel}\n                    />\n            ))}\n          </Container>\n        )\n      }}\n    </ContactsConsumer>\n  );\n}\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\n\nexport interface ITextInputProps {\n    fullWidth: boolean,\n    submited : boolean,\n    label: string,\n    margin?: \"none\" | \"dense\" | \"normal\",\n    required?: boolean,\n    value: string,\n    message?: { info?: string, error?: string },\n    limitorPattern?: RegExp,\n    validatorPattern?: RegExp,\n    onChangeMutation?: Function,\n    onChange : Function\n}\n\nexport default function TextInput(props: ITextInputProps) {\n    const [state, setState] = React.useState(props.value);\n    /**\n     * Funtion to accept change of Contact form\n     * @param value The value of input\n     */\n    const onChange = (value: string) => {\n        let nValue: string = value;\n        if (props.onChangeMutation) {\n            nValue = props.onChangeMutation(value);\n        }\n        if (!props.limitorPattern || nValue.length === 0 || isValidChangeInputContent(nValue)) {\n            setState(nValue);\n            props.onChange(nValue);\n        }\n    };\n\n    /**\n     * Function to check validity of inputs content before submit\n     */\n    const isValidSubmitInputContent = () => {\n        return !props.validatorPattern || props.validatorPattern.test(state);\n    }\n\n    /**\n     * Function to check validity of inputs content before change value of state\n     * @param value \n     */\n    const isValidChangeInputContent = (value: string) => {\n        return !props.limitorPattern || props.limitorPattern.test(value);\n    }\n\n    return (\n        <FormControl fullWidth={props.fullWidth} margin={props.margin}>\n            <TextField label={props.label}\n                required={props.required}\n                value={state}\n                error={props.submited && !isValidSubmitInputContent()}\n                onChange={(event) => { onChange(event.target.value) }}\n            />\n            {props.message ?\n                <FormHelperText id=\"email-helper-text\" error={props.submited && !isValidSubmitInputContent()} >\n                    {props.submited && !isValidSubmitInputContent() ? props.message.error || props.message.info || '' : props.message.info || ''}\n                </FormHelperText> : null}\n        </FormControl>\n    );\n}\n","import * as React from 'react';\nimport { ContactsConsumer, IContactsContextState } from '../contact-context/ContactContext';\nimport { EMPTY_CONTACT } from '../../../ConstantsUtils';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Paper from '@material-ui/core/Paper';\nimport { useTranslation } from 'react-i18next';\nimport Container from '@material-ui/core/Container';\n\nimport './ContactForm.css'\nimport TextInput from '../../widget/text-input/TextInput';\n\n/**\n* The Contact interface with mandatory id \n* To manipulate Contact after creation\n*/\nexport interface IContactForm {\n    /**\n     * The history object is React props<br/>\n     * The push function is React props attribut to make redirection with ReactRouter  \n     */\n    history: {\n        push: Function\n    }\n}\n\n/**\n * Form component to add contact\n * @param props To redirect to the list page after add contact in context\n */\nexport default function ContactForm(props: IContactForm) {\n    const { t } = useTranslation();\n    // Add contact object in state of form\n    const [contact, setContact] = React.useState(EMPTY_CONTACT);\n    const [submited, setSubmited] = React.useState(false);\n\n    const inputs: Array<any> = [\n        {\n            name: 'name',\n            limitor: /^[A-Z\\-]*$/,\n            validator: /^[A-Z][A-Z\\-]+$/,\n            value: contact.name,\n            onChangeMutation: (value: string) => value.toUpperCase().trim(),\n            onChange: (value: string) => { onChange(value, 'name') }\n        },\n        {\n            name: 'email',\n            limitor: /^[A-Za-z0-9\\-_\\.@]*$/,\n            validator: /^[A-Za-z0-9\\-_\\.]+@[A-Za-z0-9\\-_]+\\.[A-Za-z]{2,4}$/,\n            value: contact.email,\n            message: true,\n            onChange: (value: string) => { onChange(value, 'email') }\n        },\n        {\n            name: 'tel',\n            limitor: /^((\\+\\d{0,11})|(\\d{0,10}))$/,\n            validator: /^(?:\\+\\d{11})|(?:\\d{10})$/,\n            value: contact.tel,\n            message: true,\n            onChange: (value: string) => { onChange(value, 'tel') }\n        }\n    ];\n\n    /**\n     * Funtion to accept change of Contact form\n     * @param value The value of input\n     * @param key The key of contact object to update\n     */\n    const onChange = (value: string, key: string) => {\n        let contactUpdated: any = { ...contact };\n        contactUpdated[key] = value;\n        setContact(contactUpdated);\n    };\n\n    /**\n     * Function to add contact in context/list\n     * @param event The submit event\n     * @param context The context to add contact\n     */\n    const onSubmit = (context: IContactsContextState) => {\n        if (isValidSubmitForm()) {\n            context.dispatch({ type: 'ADD_CONTACT', payload: contact });\n            setContact(EMPTY_CONTACT);\n            props.history.push('/');\n        }\n        setSubmited(true);\n    };\n\n    /**\n     * Function to check validity of inputs content before submit\n     */\n    const isValidSubmitForm = () => {\n        let result: boolean = true;\n        inputs.forEach((input) => {\n            console.log(result, input.name, contact, input.validator.test(input.value));\n            result = result && input.validator.test(input.value);\n        });\n        return result;\n    }\n\n    /**\n     * Render of ContactForm component\n     */\n    return (\n        <ContactsConsumer>\n            {context => {\n                return (\n                    <Container maxWidth=\"sm\" className='padding-1'>\n\n                        <Paper className=\"padding-1\">\n                            <h2>{t('pages.addContact.title')}</h2>\n                            <form noValidate autoComplete=\"off\">\n                                {inputs.map((input, index) => {\n                                    return (\n                                        <TextInput\n                                            key={index}\n                                            fullWidth={true}\n                                            submited={submited}\n                                            margin='normal'\n                                            label={t(`pages.addContact.inputs.${input.name}.placeholder`)}\n                                            required\n                                            value={input.value}\n                                            onChange={input.onChange}\n                                            limitorPattern={input.limitor}\n                                            validatorPattern={input.validator}\n                                            onChangeMutation={input.onChangeMutation}\n                                            message={input.message ? { info: t(`pages.addContact.inputs.${input.name}.help-message`), error: t(`pages.addContact.inputs.${input.name}.error-message`) } : undefined}\n                                        />\n                                    );\n                                })}\n                                <FormControl fullWidth={true} margin='normal'>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\" onClick={() => { onSubmit(context) }}\n                                    >\n                                        {t('pages.addContact.inputs.submit.text')}\n                                    </Button>\n                                </FormControl>\n                            </form>\n                        </Paper>\n                    </Container>\n                )\n            }}\n        </ContactsConsumer>\n    );\n}\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Container from '@material-ui/core/Container';\n\n/**\n * The **AboutUs** component page is to explain what is the application and who make it\n */\nexport default function AboutUs () {\n  const { t } = useTranslation();\n  return (\n    <Container maxWidth=\"sm\" className='padding-1'>\n      <h1 className='display-5'>{t('pages.aboutUs.title')}</h1>\n      <p className=\"lead\">{t('pages.aboutUs.description')}</p>\n      <p className=\"author\">{t('pages.aboutUs.author')}</p>\n      <p>Version {t('pages.aboutUs.version')}</p>\n    </Container>\n  );\n}\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * The **Error 404** component page is to inform user of bad access pages\n */\nexport default function Error404 () {\n  const { t } = useTranslation();\n  return (\n    <React.Fragment>\n        <h1 className='display-5 error'>{t('pages.error.404.title')}</h1>\n        <p>\n          {t('pages.error.404.description')}\n        </p>\n      </React.Fragment>\n  );\n}\n","import React, {Suspense} from 'react';\nimport Header from './components/header/Header';\nimport ContactList from './components/contact-components/contact-list/ContactList';\nimport { ContactsProvider } from './components/contact-components/contact-context/ContactContext';\nimport ContactForm from './components/contact-components/contact-form/ContactForm';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport AboutUs from './components/about-us/AboutUs';\nimport Error404 from './components/error-page/404/Error404';\n\nfunction App() {\n  return (\n    <Suspense fallback=\"loading\">\n    <ContactsProvider>\n      <Router>\n        <Header/>\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/appcontacts-react\" component={ContactList}/>\n            <Route exact path=\"/\" component={ContactList}/>\n            <Route exact path=\"/add\" component={ContactForm}/>\n            <Route exact path=\"/about\" component={AboutUs}/>\n\n            <Route component={Error404}/>\n          </Switch>\n        </div>\n      </Router>\n    </ContactsProvider>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n//import Backend from 'i18next-xhr-backend';\nimport en from './locales/en/translation.json';\nimport fr from './locales/fr/translation.json';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\n// not like to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\nconst resources = {\n    en : {\n        translation : en\n    },\n    fr : {\n        translation : fr\n    }\n}\ni18n\n    // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n    // learn more: https://github.com/i18next/i18next-xhr-backend\n    //.use(Backend)\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(LanguageDetector)\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        resources,\n        fallbackLng: ['en', 'fr'],\n        debug: true,\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        }\n    });\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './i18n';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}