{"version":3,"sources":["components/header/Header.tsx","ConstantsUtils.ts","components/contact-components/contact-context/ContactContext.tsx","components/contact-components/contact/Contact.tsx","components/contact-components/contact-list/ContactList.tsx","components/text-input/TextInput.tsx","components/contact-components/contact-form/ContactForm.tsx","components/about-us/AboutUs.tsx","components/error-page/404/Error404.tsx","themes/theme.tsx","App.tsx","i18n.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","useTranslation","t","i18n","useState","i18next","language","setLanguage","languages","React","anchorEl","setAnchorEl","handleClose","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","event","currentTarget","Typography","variant","to","style","textDecoration","Button","length","changeLanguage","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","EMPTY_CONTACT","lastName","firstName","email","tel","ContactContext","createContext","ContactsProvider","props","currentContactId","contacts","dispatch","action","setState","state","type","console","log","payload","filter","contact","contactReducer","Provider","value","children","ContactsConsumer","Consumer","Contact","show","showContact","ExpansionPanel","expanded","onChange","display","ExpansionPanelSummary","expandIcon","aria-controls","cursor","float","ExpansionPanelDetails","List","ListItem","button","ListItemIcon","ListItemText","primary","ContactList","useEffect","Container","maxWidth","component","Card","map","key","TextInput","isValidSubmitInputContent","validatorPattern","test","isValidChangeInputContent","limitorPattern","TextField","fullWidth","margin","label","required","helperText","message","submited","error","info","undefined","nValue","onChangeMutation","target","ContactForm","setContact","setSubmited","inputs","name","limitor","validator","toUpperCase","val","toLowerCase","valArr","split","element","slice","join","contactUpdated","isValidSubmitForm","result","forEach","input","context","Paper","noValidate","autoComplete","index","FormControl","history","push","onSubmit","AboutUs","Error404","light","createMuiTheme","palette","secondary","dark","App","themeUI","selectedTheme","changeTheme","ThemeProvider","fallback","minHeight","marginTop","zIndex","backgroundColor","background","default","exact","path","opacity","bottom","left","resources","en","translation","fr","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4555a0a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\n/**\n * The Header banner of application with Link to access all pages\n */\nexport default function Header() {\n  const { t, i18n } = useTranslation();\n  // save the curren language\n  const [language, setLanguage] = useState(i18next.language);\n  // save all languages\n  const languages = i18next.languages;\n\n  /**\n   * Funtion to change the language of application\n   */\n  const onChangeLanguage = () => {\n    if (languages.length > 1) {\n      i18n.changeLanguage(languages[1]);\n      setLanguage(languages[1]);\n    }\n  }\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event : any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const classes = useStyles();\n\n\n  return (\n    <div className={classes.root}>\n\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className={classes.menuButton} onClick={handleClick}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\"  className={classes.title}>\n            <Link to='/' style={{color : \"inherit\", textDecoration : 'none' }}>{t('application-name')}</Link>\n          </Typography>\n          <Button variant=\"contained\" color=\"secondary\" onClick={onChangeLanguage}>{language}</Button>\n        </Toolbar>\n      </AppBar>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Link style={{color : \"inherit\", textDecoration : 'none' }} to='/' ><MenuItem onClick={handleClose}>{t('components.contact-list.link')}</MenuItem></Link>\n        <Link style={{color : \"inherit\", textDecoration : 'none' }} to='/add' ><MenuItem onClick={handleClose}>{t('components.contact-form.link')}</MenuItem></Link>\n        <Link style={{color : \"inherit\", textDecoration : 'none' }} to='/about' ><MenuItem onClick={handleClose}>{t('components.about-us.link')}</MenuItem></Link>\n      </Menu>\n\n    </div>\n\n  );\n}\n\n","import { IContact } from \"./components/contact-components/contact/Contact\";\n\n/**\n * Empty Contact constant\n */\nexport const EMPTY_CONTACT : IContact = {\n    lastName : '', \n    firstName : '', \n    email : '', \n    tel : ''\n};\n\n/**\n * Empty any constant\n */\nexport const EMPTY_ANY : any = {};","import React, { createContext, useState } from 'react';\nimport { EMPTY_ANY } from '../../../ConstantsUtils';\nimport { IContactWithId } from '../contact/Contact';\n\n/**\n * Context Interface\n * The Action interface to explain the payload format\n * key id to DELETE action\n * keys name, email, tel to ADD action\n */\nexport interface IContactsContextAction {\n    type : string,\n    payload : {\n        name? : string,\n        email? : string,\n        tel? : string,\n        id? : number\n    }\n}\n\n/**\n * Context Interface\n * The State interface to explain the Context state content\n */\nexport interface IContactsContextState {\n    currentContactId : number,\n    contacts : Array<IContactWithId>,\n    dispatch : any\n}\n\nconst ContactContext = createContext(EMPTY_ANY);\n\n/**\n * The reducer function to interact with context state\n * @param state The state of context\n * @param action The data passed to interact with context\n */\nexport const contactReducer = (state: IContactsContextState, action: IContactsContextAction) => {\n    switch (action.type) {\n        case 'ADD_CONTACT':\n            console.log('add clicked', state, action);\n            action.payload.id = state.currentContactId;\n            const nContact : IContactWithId = action.payload as IContactWithId;\n            return {\n                contacts: [nContact, ...state.contacts],\n                dispatch: state.dispatch,\n                currentContactId: ++state.currentContactId\n            }\n        case 'DELETE_CONTACT':\n            console.log('delete clicked', state, action);\n            return {\n                contacts: state.contacts.filter((contact: IContactWithId) => contact.id !== action.payload.id),\n                dispatch: state.dispatch,\n                currentContactId: state.currentContactId\n            }\n        default:\n            return state;\n    }\n};\n\n/**\n * The Provider component to defined the context content\n * @param props The props object to interact with context content \n */\nexport function ContactsProvider(props: {children : any}) {\n    const listDefaultContacts : Array<IContactWithId> = [\n                {\n                    id: 0,\n                    email: 'jean.dupont@email.fr',\n                    lastName: 'DUPONT',\n                    firstName: 'Pierre',\n                    tel: '012345689'\n                }\n            ];\n    /**\n     * State of context with default values\n     */\n    const [state, setState] = useState(\n        {\n            currentContactId: 1,\n            contacts: listDefaultContacts,\n            // fonction to write in context\n            dispatch: (action: IContactsContextAction) => {\n                setState((state : IContactsContextState) => contactReducer(state, action));\n            }\n        }\n    );\n    // Context Provider component render\n    return (\n        <ContactContext.Provider value={state}>\n            {props.children}\n        </ContactContext.Provider>\n    );\n}\n\n// The Consumer of context to read context state content\nexport const ContactsConsumer = ContactContext.Consumer;\n","import React, { useState } from 'react';\nimport { ContactsConsumer } from '../contact-context/ContactContext';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\n\n/**\n * The Contact interface with optional id\n * To manipulate Contact before creation\n */\nexport interface IContact {\n  /**\n   * The lastName of Contact\n   */\n  lastName: string,\n  /**\n   * The firstName of Contact\n   */\n  firstName: string,\n  /**\n   * The email of contact\n   */\n  email: string,\n  /**\n   * The telephone number of Contact\n   */\n  tel: string,\n  /**\n   * The id of Contact (assigned by context dispatcher)\n   */\n  id?: number\n}\n\n/**\n* The Contact interface with mandatory id \n* To manipulate Contact after creation\n*/\nexport interface IContactWithId {\n  /**\n   * The lastName of Contact\n   */\n  lastName: string,\n  /**\n   * The firstName of Contact\n   */\n  firstName: string,\n  /**\n   * The email of contact\n   */\n  email: string,\n  /**\n   * The telephone number of Contact\n   */\n  tel: string,\n  /**\n   * The id of Contact (assigned by context dispatcher)\n   */\n  id: number\n}\n\n/**\n * The component to display Contact card item\n * @param props The contact object content\n */\nexport default function Contact(props: IContact) {\n  /**\n   * The display state \n   * true show content card\n   * false hide content card\n   */\n  const [show, showContact] = useState(false);\n\n  /**\n   * Function to delete a contact in list\n   * @param contact The contact object content \n   * @param dispatch The function to interact with context, to delete contact in context state\n   */\n  const onDelete = (contact: IContact, dispatch: Function) => {\n    if (typeof (contact.id) !== 'undefined') {\n      dispatch({ type: 'DELETE_CONTACT', payload: { id: contact.id } });\n    }\n  };\n  /**\n   * render of component with ContactContext closure\n   */\n  return (\n    <ContactsConsumer>\n      {value => {\n        return (\n            <ExpansionPanel expanded={show} onChange={() => showContact(display => !display)}>\n              <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1bh-content\"\n                id=\"panel1bh-header\"\n              >\n                <Typography><DeleteOutline style={{ cursor: 'pointer', float: 'left', color: 'red', marginRight : '1em'}} onClick={() => { onDelete(props, value.dispatch) }}/>\n                {props.lastName} {props.firstName}</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                  <List aria-label=\"main contact\">\n                    <ListItem button>\n                      <ListItemIcon>\n                        <PhoneIcon />\n                      </ListItemIcon>\n                      <ListItemText primary={props.tel} />\n                    </ListItem>\n                    <ListItem button>\n                      <ListItemIcon>\n                        <DraftsIcon />\n                      </ListItemIcon>\n                      <ListItemText primary={props.email} />\n                    </ListItem>\n                  </List>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n      }}\n    </ContactsConsumer>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Contact, { IContactWithId } from '../contact/Contact';\nimport { ContactsConsumer } from '../contact-context/ContactContext';\nimport { useTranslation } from 'react-i18next';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\n\n/**\n * The Contact List component to display all contact\n */\nexport default function ContactList() {\n  const { t } = useTranslation();\n  /**\n   * Hook function to print in log after component creation\n   */\n  useEffect(() => {\n    console.log('The component is mounted');\n  });\n  /**\n   * The render of Contact List component with context closure\n   */\n  return (\n    <ContactsConsumer>\n      {value => {\n        return (\n          <Container maxWidth=\"sm\" className='padding-1'>\n            <Typography variant=\"h4\" component=\"h2\" color=\"textPrimary\">\n              {t('components.contact-list.title')}\n            </Typography>\n            {value.contacts.length > 0 ? (<Card>\n              {value.contacts.map((contact: IContactWithId) => (\n                <Contact\n                  key={contact.id}\n                  id={contact.id}\n                  lastName={contact.lastName}\n                  firstName={contact.firstName}\n                  email={contact.email}\n                  tel={contact.tel}\n                />\n              ))}\n            </Card>) : (\n                <Typography variant=\"body1\" component=\"p\" color=\"textSecondary\">\n                  {t('components.contact-list.empty-list')}\n                </Typography>\n              )}\n          </Container>\n        )\n      }}\n    </ContactsConsumer>\n  );\n}\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\n/**\n * Interface of TextInput Component \n */\nexport interface ITextInputProps {\n    /**\n     * The width of textInput consume all space if true\n     */\n    fullWidth: boolean,\n    /**\n     * If the parent form is submitted\n     */\n    submited : boolean,\n    /**\n     * The label of input\n     */\n    label: string,\n    /**\n     * The margin of input\n     */\n    margin?: \"none\" | \"dense\" | \"normal\",\n    /**\n     * The input is mandatory for form\n     */\n    required?: boolean,\n    /**\n     * The value of input\n     */\n    value: string,\n    /**\n     * The helpMessage to complete input or the errorMessage if value of input don't match with patternValidator\n     */\n    message?: { info?: string, error?: string },\n    /**\n     * The pattern to limit the content of input\n     */\n    limitorPattern?: RegExp,\n    /**\n     * The pattern to test if value of input is valid\n     */\n    validatorPattern?: RegExp,\n    /**\n     * function to format the value of input when it change\n     */\n    onChangeMutation?: Function,\n    /**\n     * Function to upload value to the parent form\n     */\n    onChange : Function\n}\n\n/**\n * The compoenent TextInput is a TextField with work\n * @param props \n */\nexport default function TextInput(props: ITextInputProps) {\n    const [state, setState] = useState(props.value);\n    /**\n     * Funtion to accept change of Input\n     * @param value The value of input\n     */\n    const onChange = (value: string) => {\n        let nValue: string = value;\n        if (props.onChangeMutation) {\n            nValue = props.onChangeMutation(value);\n        }\n        if (!props.limitorPattern || nValue.length === 0 || isValidChangeInputContent(nValue)) {\n            setState(nValue);\n            props.onChange(nValue);\n        }\n    };\n\n    /**\n     * Function to check validity of inputs content to submit value\n     */\n    const isValidSubmitInputContent = () => {\n        return !props.validatorPattern || props.validatorPattern.test(state);\n    }\n\n    /**\n     * Function to check validity of input content before change value of state\n     * @param value The value of input\n     */\n    const isValidChangeInputContent = (value: string) => {\n        return !props.limitorPattern || props.limitorPattern.test(value);\n    }\n\n    return (\n        <TextField \n            fullWidth={props.fullWidth}\n            margin={props.margin}\n            label={props.label}\n            required={props.required}\n            helperText={props.message ? props.submited && !isValidSubmitInputContent() ? props.message.error || props.message.info || '' : props.message.info || '' : undefined}\n            value={state}\n            error={props.submited && !isValidSubmitInputContent()}\n            onChange={(event) => { onChange(event.target.value) }}\n        />\n    );\n}\n","import React, { useState } from 'react';\nimport { ContactsConsumer, IContactsContextState } from '../contact-context/ContactContext';\nimport { EMPTY_CONTACT } from '../../../ConstantsUtils';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Paper from '@material-ui/core/Paper';\nimport { useTranslation } from 'react-i18next';\nimport Container from '@material-ui/core/Container';\n\nimport './ContactForm.css'\nimport TextInput from '../../text-input/TextInput';\n\n/**\n* The Contact interface with mandatory id \n* To manipulate Contact after creation\n*/\nexport interface IContactForm {\n    /**\n     * The history object is React props<br/>\n     * The push function is React props attribut to make redirection with ReactRouter  \n     */\n    history: {\n        push: Function\n    }\n}\n\n/**\n * Form component to add contact\n * @param props To redirect to the list page after add contact in context\n */\nexport default function ContactForm(props: IContactForm) {\n    const { t } = useTranslation();\n    // Add contact object in state of form\n    const [contact, setContact] = useState(EMPTY_CONTACT);\n    const [submited, setSubmited] = useState(false);\n\n    const inputs: Array<any> = [\n        {\n            name: 'lastName',\n            limitor: /^[\\wâäàéèêëîïôöùüûç\\-]*$/i,\n            validator: /^[\\wâäàéèêëîïôöùüûç][\\wâäàéèêëîïôöùüûç\\-]+$/i,\n            value: contact.lastName,\n            onChangeMutation: (value: string) => value.toUpperCase(),\n            onChange: (value: string) => { onChange(value, 'lastName') }\n        },\n        {\n            name: 'firstName',\n            limitor: /^[\\wâäàéèêëîïôöùüûç\\-\\s]*$/i,\n            validator: /^[\\wâäàéèêëîïôöùüûç][\\wâäàéèêëîïôöùüûç\\-\\s]+$/i,\n            value: contact.firstName,\n            onChangeMutation: (value: string) => {\n                let val : string = value.toLowerCase();\n                if (/\\s/.test(val)) {\n                    let valArr: string[] = val.split(' ');\n                    valArr = valArr.map(element => {\n                        return element.slice(0, 1).toUpperCase() + element.slice(1);\n                    });\n                    val = valArr.join(' ');\n                }\n                if (/\\-/.test(val)) {\n                    let valArr: string[] = val.split('-');\n                    valArr = valArr.map(element => {\n                        return element.slice(0, 1).toUpperCase() + element.slice(1);\n                    });\n                    val = valArr.join('-');\n                }\n                val = val.slice(0, 1).toUpperCase() + val.slice(1);\n                return val\n            },\n            onChange: (value: string) => { onChange(value, 'firstName') }\n        },\n        {\n            name: 'email',\n            limitor: /^[A-Za-z0-9\\-_\\.@]*$/,\n            validator: /^[A-Za-z0-9\\-_\\.]+@[A-Za-z0-9\\-_]+\\.[A-Za-z]{2,4}$/,\n            value: contact.email,\n            message: true,\n            onChange: (value: string) => { onChange(value, 'email') }\n        },\n        {\n            name: 'tel',\n            limitor: /^((\\+\\d{0,18})|(\\d{0,18}))$/,\n            validator: /^(?:\\+\\d{9,18})|(?:\\d{7,18})$/,\n            value: contact.tel,\n            message: true,\n            onChange: (value: string) => { onChange(value, 'tel') }\n        }\n    ];\n\n    /**\n     * Funtion to accept change of Contact form\n     * @param value The value of input\n     * @param key The key of contact object to update\n     */\n    const onChange = (value: string, key: string) => {\n        let contactUpdated: any = { ...contact };\n        contactUpdated[key] = value;\n        setContact(contactUpdated);\n    };\n\n    /**\n     * Function to add contact in context/list\n     * @param event The submit event\n     * @param context The context to add contact\n     */\n    const onSubmit = (context: IContactsContextState) => {\n        if (isValidSubmitForm()) {\n            context.dispatch({ type: 'ADD_CONTACT', payload: contact });\n            setContact(EMPTY_CONTACT);\n            props.history.push('/');\n        }\n        setSubmited(true);\n    };\n\n    /**\n     * Function to check validity of inputs content before submit\n     */\n    const isValidSubmitForm = () => {\n        let result: boolean = true;\n        inputs.forEach((input) => {\n            console.log(result, input.name, contact, input.validator.test(input.value));\n            result = result && input.validator.test(input.value);\n        });\n        return result;\n    }\n\n    /**\n     * Render of ContactForm component\n     */\n    return (\n        <ContactsConsumer>\n            {context => {\n                return (\n                    <Container maxWidth=\"sm\" className='padding-1'>\n\n                        <Paper className=\"padding-1\">\n                            <h2>{t('components.contact-form.title')}</h2>\n                            <form noValidate autoComplete=\"off\">\n                                {inputs.map((input, index) => {\n                                    return (\n                                        <TextInput\n                                            key={index}\n                                            fullWidth={true}\n                                            submited={submited}\n                                            margin='normal'\n                                            label={t(`components.contact-form.inputs.${input.name}.label`)}\n                                            required\n                                            value={input.value}\n                                            onChange={input.onChange}\n                                            limitorPattern={input.limitor}\n                                            validatorPattern={input.validator}\n                                            onChangeMutation={input.onChangeMutation}\n                                            message={input.message ? { info: t(`components.contact-form.inputs.${input.name}.help-message`), error: t(`components.contact-form.inputs.${input.name}.error-message`) } : undefined}\n                                        />\n                                    );\n                                })}\n                                <FormControl fullWidth={true} margin='normal'>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\" onClick={() => { onSubmit(context) }}\n                                    >\n                                        {t('components.contact-form.inputs.submit.text')}\n                                    </Button>\n                                </FormControl>\n                            </form>\n                        </Paper>\n                    </Container>\n                )\n            }}\n        </ContactsConsumer>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * The **AboutUs** component page is to explain what is the application and who make it\n */\nexport default function AboutUs() {\n  const { t } = useTranslation();\n  return (\n    <Container maxWidth=\"sm\" className='padding-1'>\n      <Typography variant=\"h4\" component=\"h2\" color=\"textPrimary\">\n        {t('components.about-us.title')}\n      </Typography>\n      <Typography variant=\"body1\" component=\"p\" color=\"textSecondary\">\n        {t('components.about-us.description')}\n      </Typography>\n      <Typography variant=\"body1\" component=\"p\" color=\"textSecondary\">\n        {t('components.about-us.author')}\n      </Typography>\n      <Typography variant=\"body1\" component=\"p\" color=\"textSecondary\">\n        {t('components.about-us.version')}\n      </Typography>\n    </Container>\n  );\n}\n","import React, { Fragment } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * The **Error 404** component page is to inform user of bad access pages\n */\nexport default function Error404 () {\n  const { t } = useTranslation();\n  return (\n    <Fragment>\n        <h1 className='display-5 error'>{t('component.error-pages.404.title')}</h1>\n        <p>\n          {t('component.error-pages.404.description')}\n        </p>\n      </Fragment>\n  );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport * as color from '@material-ui/core/colors';\n\nconst light : any = createMuiTheme({\n    palette: {\n        type: 'light',\n        primary: color.teal,\n        secondary: color.teal\n    }\n});\nconst dark : any = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: color.teal,\n        secondary: color.teal\n    }\n});\n\nexport default {light, dark};","import React, { Suspense } from 'react';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ThemeProvider } from '@material-ui/styles';\nimport { Container, Button } from '@material-ui/core';\n\nimport Header from './components/header/Header';\nimport ContactList from './components/contact-components/contact-list/ContactList';\nimport { ContactsProvider } from './components/contact-components/contact-context/ContactContext';\nimport ContactForm from './components/contact-components/contact-form/ContactForm';\nimport AboutUs from './components/about-us/AboutUs';\nimport Error404 from './components/error-page/404/Error404';\nimport themeUI from './themes/theme';\nimport { useTranslation } from 'react-i18next';\n\nfunction App() {\n  const [selectedTheme, changeTheme] = React.useState(themeUI.light);\n  const { t } = useTranslation();\n  return (\n    <ThemeProvider theme={selectedTheme}>\n      <Suspense fallback=\"loading\">\n        <div style={{\n          minHeight: '100vh',\n          marginTop: '0',\n          zIndex: 1,\n          backgroundColor: selectedTheme.palette.background.default,\n        }}>\n          <ContactsProvider>\n            <Router>\n              <Header />\n              <Container>\n                <Switch>\n                  <Route exact path=\"/appcontacts-react\" component={ContactList} />\n                  <Route exact path=\"/\" component={ContactList} />\n                  <Route exact path=\"/add\" component={ContactForm} />\n                  <Route exact path=\"/about\" component={AboutUs} />\n\n                  <Route component={Error404} />\n                </Switch>\n              </Container>\n            </Router>\n          </ContactsProvider>\n          <Button style={{opacity : '0.7', position : 'fixed', bottom : '1em', left : '1em'}} onClick={() => {changeTheme(selectedTheme.palette.type === 'light'? themeUI.dark : themeUI.light)}} variant=\"contained\" color='default' >{t('theme.' + selectedTheme.palette.type)}</Button>\n        </div>\n      </Suspense>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n//import Backend from 'i18next-xhr-backend';\nimport en from './locales/en/translation.json';\nimport fr from './locales/fr/translation.json';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\n// not like to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\nconst resources = {\n    en : {\n        translation : en\n    },\n    fr : {\n        translation : fr\n    }\n}\ni18n\n    // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n    // learn more: https://github.com/i18next/i18next-xhr-backend\n    //.use(Backend)\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(LanguageDetector)\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        resources,\n        fallbackLng: ['en', 'fr'],\n        debug: true,\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        }\n    });\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './i18n';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}