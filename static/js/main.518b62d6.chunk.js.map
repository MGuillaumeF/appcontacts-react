{"version":3,"sources":["components/header/Header.tsx","components/contact/ContactUtils.ts","components/contact/contact-context/ContactContext.tsx","components/contact/Contact.tsx","components/contact/contact-list/ContactList.tsx","components/contact/contact-form/ContactForm.tsx","components/about-us/AboutUs.tsx","components/error-page/Error404.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","EMPTY_CONTACT","nom","email","tel","ContactContext","React","Provider","props","currentContactId","contacts","id","dispatch","action","setContacts","state","type","console","log","payload","filter","contact","contactReducer","value","children","Consumer","Contact","show","showContact","style","cursor","onClick","display","float","color","ContactList","map","key","ContactForm","setContact","onChange","contactUpdated","Object","assign","context","onSubmit","event","preventDefault","history","push","htmlFor","placeholder","name","target","AboutUs","Error404","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.518b62d6.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport default function Header () {\n  return (\n    <div>\n      <nav className='navbar navbar-dark bg-primary mb-3 py-0'>\n          <div className=\"container\">\n            <Link to='/'  className='navbar-brand'>AppContacts</Link>\n            <ul className='navbar-nav d-inline-block'>\n                <li className='nav-item d-inline-block mr-2'>\n                    <Link to='/' className='nav-link'>Home</Link>\n                </li>\n                <li className='nav-item d-inline-block mr-2'>\n                    <Link to='/add' className='nav-link'>Add</Link>\n                </li>\n                <li className='nav-item d-inline-block mr-2'>\n                    <Link to='/about' className='nav-link'>About us</Link>\n                </li>\n            </ul> \n          </div>\n      </nav>\n    </div>\n  );\n}\n\n","export interface IContact {\n    nom : string,\n    email : string,\n    tel : string,\n    id? : number\n}\n\nexport const EMPTY_CONTACT : IContact = {nom : '', email : '', tel : ''};\n\nexport const EMPTY_ANY : any = {};","import * as React from 'react';\nimport { EMPTY_ANY } from '../ContactUtils';\n\nexport const contactReducer = (state : any, action : any) => {\n    switch(action.type) {\n        case 'ADD_CONTACT' :\n            console.log('add clicked', state, action);\n            action.payload.id = state.currentContactId;\n            return {\n                contacts : [action.payload, ...state.contacts],\n                dispatch : state.dispatch,\n                currentContactId : ++state.currentContactId\n            }\n        case 'DELETE_CONTACT' :\n            console.log('delete clicked', state, action);\n            return {\n                contacts : state.contacts.filter((contact: any) => contact.id !== action.payload),\n                dispatch : state.dispatch,\n                currentContactId : state.currentContactId\n            }\n        default :\n            return state;\n    }\n};\n\nexport const ContactContext = React.createContext(EMPTY_ANY);\n\nexport function Provider (props : any) {\n    let [contacts, setContacts] = React.useState({\n        currentContactId : 1,\n        contacts : [\n            {\n                id : 0,\n                email : 'a@a.fr',\n                nom : 'test', \n                tel : '012345689'\n            }\n        ],\n        dispatch : (action : any) => {\n            setContacts(contacts => contactReducer(contacts, action));\n        }\n    }\n);\n    \n  return (\n    <ContactContext.Provider value={contacts}>\n        {props.children}\n    </ContactContext.Provider>\n  );\n}\n\nexport const Consumer = ContactContext.Consumer;\n","import * as React from 'react';\nimport { Consumer } from './contact-context/ContactContext';\nimport { IContact } from './ContactUtils';\n\nexport default function Contact (props: IContact) {\n  let [show, showContact] = React.useState(false);\n  const onDelete = (id : number | undefined, dispatch : any) => {\n    if (typeof(id) !== 'undefined') {\n      dispatch({type : 'DELETE_CONTACT', payload : id});\n    }\n  };\n  return (\n    <Consumer>\n      {value => {\n        return (\n          <div className='card card-body mb-3 text-center'>\n            <h4>{props.nom}&nbsp;\n            <i \n              style={{cursor : 'pointer'}} \n              className='fas fa-sort-down' \n              onClick={() => showContact(display => !display)}\n            ></i>\n            <i \n              style={{cursor : 'pointer', float : 'right', color : 'red'}} \n              className='fas fa-times' \n              onClick={() => {onDelete(props.id, value.dispatch)}}\n            ></i>\n            </h4>\n            {show ? (\n              <ul className='card card-body mb-3'>\n                <li className='list-group-item'>\n                  Email : {props.email}\n                </li>\n                <li className='list-group-item'>\n                  Téléphone : {props.tel}\n                </li>\n            </ul>) : null}\n          </div>\n        )}}\n    </Consumer>\n  );\n}\n","import * as React from 'react';\nimport Contact from '../Contact';\nimport { Consumer } from '../contact-context/ContactContext';\nimport { IContact } from '../ContactUtils';\n\nexport default function ContactList () {\n  React.useEffect(() => {\n    console.log('The component is mounted');\n  });\n  return (\n    <Consumer>\n      {value => {\n        return (\n          <React.Fragment>\n            <h1 className='display-5 my-4'>My Contacts : </h1>\n            {value.contacts.map((contact: IContact) => (\n                <Contact \n                    key={contact.id}\n                    id={contact.id}\n                    nom={contact.nom}\n                    email={contact.email}\n                    tel={contact.tel}\n                    />\n            ))}\n          </React.Fragment>\n        )\n      }}\n    </Consumer>\n  );\n}\n","import * as React from 'react';\nimport { Consumer } from '../contact-context/ContactContext';\nimport { EMPTY_CONTACT } from '../ContactUtils';\n\nexport default function ContactForm (props : any) {\n    // Add contact object in state of form\n    let [contact, setContact] = React.useState(EMPTY_CONTACT);\n    /**\n     * Funtion to accept change of Contact form\n     * @param value The value of input\n     * @param key The key of contact object to update\n     */\n    const onChange = (value : string, key : string) => {\n        let contactUpdated : any = Object.assign({}, contact);\n        contactUpdated[key] = value;\n        setContact(contactUpdated);\n    };\n    /**\n     * Function to add contact in context/list\n     * @param event The submit event\n     * @param context The context to add contact\n     */\n    const onSubmit = (event : any, context : any) => {\n        event.preventDefault();\n        context.dispatch({type : 'ADD_CONTACT', payload : contact});\n        setContact(EMPTY_CONTACT);\n        props.history.push('/');\n    };\n  return (\n    <Consumer>\n        {context => {\n            return (\n                <div className=\"card mb-3\">\n                <div className=\"card-header\">Add a Contact</div>\n                <div className=\"card-body\">\n                    <form onSubmit={(event) => {onSubmit(event, context)}}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control form-control-lg\"\n                                placeholder=\"Name...\"\n                                name=\"name\"\n                                value={contact.nom}\n                                onChange={(event) => {onChange(event.target.value, 'nom')}}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Email</label>\n                            <input\n                                type=\"email\"\n                                className=\"form-control form-control-lg\"\n                                placeholder=\"Email...\"\n                                name=\"email\"\n                                value={contact.email}\n                                onChange={(event) => {onChange(event.target.value, 'email')}}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"tel\">Telephone</label>\n                            <input\n                                type=\"tel\"\n                                className=\"form-control form-control-lg\"\n                                placeholder=\"Telephone...\"\n                                name=\"tel\"\n                                value={contact.tel}\n                                onChange={(event) => {onChange(event.target.value, 'tel')}}\n                            />\n                        </div>\n                        <input\n                            type=\"submit\" \n                            value=\"Add Contact\" \n                            className=\"btn btn-block btn-primary\"\n                        />\n                    </form>\n                </div>\n                </div>\n            )}}\n        </Consumer>\n  );\n}\n","import * as React from 'react';\n\n\nexport default function AboutUs () {\n  return (\n    <React.Fragment>\n      <h1 className='display-5'>About Us</h1>\n      <p className=\"lead\">lorem ipsum...</p>\n      <p>Version 1.0.0</p>\n    </React.Fragment>\n  );\n}\n","import * as React from 'react';\n\n\nexport default function Error404 () {\n  return (\n    <React.Fragment>\n        <h1 className='display-5 error'>Error 404</h1>\n        <p>\n            Page not found\n        </p>\n      </React.Fragment>\n  );\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport Header from './components/header/Header';\nimport ContactList from './components/contact/contact-list/ContactList';\nimport { Provider } from './components/contact/contact-context/ContactContext';\nimport ContactForm from './components/contact/contact-form/ContactForm';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport AboutUs from './components/about-us/AboutUs';\nimport Error404 from './components/error-page/Error404';\n\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n        <Header/>\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/appcontacts-react\" component={ContactList}/>\n            <Route exact path=\"/\" component={ContactList}/>\n            <Route exact path=\"/add\" component={ContactForm}/>\n            <Route exact path=\"/about\" component={AboutUs}/>\n            <Route component={Error404}/>\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}