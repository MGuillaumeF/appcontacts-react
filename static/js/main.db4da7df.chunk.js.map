{"version":3,"sources":["components/header/Header.tsx","ConstantsUtils.ts","components/contact-components/contact-context/ContactContext.tsx","components/contact-components/contact/Contact.tsx","components/contact-components/contact-list/ContactList.tsx","components/contact-components/contact-form/ContactForm.tsx","components/about-us/AboutUs.tsx","components/error-page/404/Error404.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","EMPTY_CONTACT","name","email","tel","ContactContext","React","ContactsProvider","props","currentContactId","contacts","id","dispatch","action","setState","state","type","console","log","payload","filter","contact","contactReducer","Provider","value","children","ContactsConsumer","Consumer","Contact","show","showContact","style","cursor","onClick","display","float","color","ContactList","map","key","ContactForm","setContact","onChange","contactUpdated","context","onSubmit","event","preventDefault","history","push","htmlFor","placeholder","target","AboutUs","Error404","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db4da7df.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Link } from \"react-router-dom\";\n\n/**\n * The Header banner of application with Link to access all pages\n */\nexport default function Header () {\n  return (\n    <header>\n      <nav className='navbar navbar-dark bg-primary mb-3 py-0'>\n          <div className=\"container\">\n            <Link to='/'  className='navbar-brand'>AppContacts</Link>\n            <ul className='navbar-nav d-inline-block'>\n                <li className='nav-item d-inline-block mr-2'>\n                    <Link to='/' className='nav-link'>Home</Link>\n                </li>\n                <li className='nav-item d-inline-block mr-2'>\n                    <Link to='/add' className='nav-link'>Add</Link>\n                </li>\n                <li className='nav-item d-inline-block mr-2'>\n                    <Link to='/about' className='nav-link'>About us</Link>\n                </li>\n            </ul> \n          </div>\n      </nav>\n    </header>\n  );\n}\n\n","import { IContact } from \"./components/contact-components/contact/Contact\";\n\n/**\n * Empty Contact constant\n */\nexport const EMPTY_CONTACT : IContact = {name : '', email : '', tel : ''};\n\n/**\n * Empty any constant\n */\nexport const EMPTY_ANY : any = {};","import * as React from 'react';\nimport { EMPTY_ANY } from '../../../ConstantsUtils';\nimport { IContactWithId } from '../contact/Contact';\n\n\n/**\n * Context Interface\n * The Action interface to explain the payload format\n * key id to DELETE action\n * keys name, email, tel to ADD action\n */\nexport interface IContactsContextAction {\n    type : string,\n    payload : {\n        name? : string,\n        email? : string,\n        tel? : string,\n        id? : number\n    }\n}\n\n/**\n * Context Interface\n * The State interface to explain the Context state content\n */\nexport interface IContactsContextState {\n    currentContactId : number,\n    contacts : Array<IContactWithId>,\n    dispatch : any\n}\n\nconst ContactContext = React.createContext(EMPTY_ANY);\n\n/**\n * The reducer function to interact with context state\n * @param state The state of context\n * @param action The data passed to interact with context\n */\nexport const contactReducer = (state: IContactsContextState, action: IContactsContextAction) => {\n    switch (action.type) {\n        case 'ADD_CONTACT':\n            console.log('add clicked', state, action);\n            action.payload.id = state.currentContactId;\n            const nContact : IContactWithId = action.payload as IContactWithId;\n            return {\n                contacts: [nContact, ...state.contacts],\n                dispatch: state.dispatch,\n                currentContactId: ++state.currentContactId\n            }\n        case 'DELETE_CONTACT':\n            console.log('delete clicked', state, action);\n            return {\n                contacts: state.contacts.filter((contact: IContactWithId) => contact.id !== action.payload.id),\n                dispatch: state.dispatch,\n                currentContactId: state.currentContactId\n            }\n        default:\n            return state;\n    }\n};\n\n/**\n * The Provider component to defined the context content\n * @param props The props object to interact with context content \n */\nexport function ContactsProvider(props: {children : any}) {\n    const listDefaultContacts : Array<IContactWithId> = [\n                {\n                    id: 0,\n                    email: 'jean.dupont@email.fr',\n                    name: 'Dupont',\n                    tel: '012345689'\n                }\n            ];\n    /**\n     * State of context with default values\n     */\n    const [state, setState] = React.useState(\n        {\n            currentContactId: 1,\n            contacts: listDefaultContacts,\n            // fonction to write in context\n            dispatch: (action: IContactsContextAction) => {\n                setState((state : IContactsContextState) => contactReducer(state, action));\n            }\n        }\n    );\n    // Context Provider component render\n    return (\n        <ContactContext.Provider value={state}>\n            {props.children}\n        </ContactContext.Provider>\n    );\n}\n\n// The Consumer of context to read context state content\nexport const ContactsConsumer = ContactContext.Consumer;\n","import * as React from 'react';\nimport { ContactsConsumer } from '../contact-context/ContactContext';\n\n/**\n * The Contact interface with optional id\n * To manipulate Contact before creation\n */\nexport interface IContact {\n  /**\n   * The name of Contact\n   */\n  name : string,\n  /**\n   * The email of contact\n   */\n  email : string,\n  /**\n   * The telephone number of Contact\n   */\n  tel : string,\n  /**\n   * The id of Contact (assigned by context dispatcher)\n   */\n  id? : number\n}\n\n/**\n* The Contact interface with mandatory id \n* To manipulate Contact after creation\n*/\nexport interface IContactWithId {\n  /**\n   * The name of Contact\n   */\n  name : string,\n  /**\n   * The email of contact\n   */\n  email : string,\n  /**\n   * The telephone number of Contact\n   */\n  tel : string,\n  /**\n   * The id of Contact (assigned by context dispatcher)\n   */\n  id : number\n}\n\n/**\n * The component to display Contact card item\n * @param props The contact object content\n */\nexport default function Contact (props: IContact) {\n\n  /**\n   * The display state \n   * true show content card\n   * false hide content card\n   */\n  const [show, showContact] = React.useState(false);\n\n  /**\n   * Function to delete a contact in list\n   * @param contact The contact object content \n   * @param dispatch The function to interact with context, to delete contact in context state\n   */\n  const onDelete = (contact : IContact, dispatch : Function) => {\n    if (typeof(contact.id) !== 'undefined') {\n      dispatch({type : 'DELETE_CONTACT', payload : {id : contact.id}});\n    }\n  };\n  /**\n   * render of component with ContactContext closure\n   */\n  return (\n    <ContactsConsumer>\n      {value => {\n        return (\n          <div className='card card-body mb-3 text-center'>\n            <h4>{props.name}&nbsp;\n            <i \n              style={{cursor : 'pointer'}} \n              className='fas fa-sort-down' \n              onClick={() => showContact(display => !display)}\n            ></i>\n            <i \n              style={{cursor : 'pointer', float : 'right', color : 'red'}} \n              className='fas fa-times' \n              onClick={() => {onDelete(props, value.dispatch)}}\n            ></i>\n            </h4>\n            {show ? (\n              <ul className='card card-body mb-3'>\n                <li className='list-group-item'>\n                  Email : {props.email}\n                </li>\n                <li className='list-group-item'>\n                  Telephone : {props.tel}\n                </li>\n            </ul>) : null}\n          </div>\n        )}}\n    </ContactsConsumer>\n  );\n}\n","import * as React from 'react';\nimport Contact, { IContactWithId } from '../contact/Contact';\nimport { ContactsConsumer } from '../contact-context/ContactContext';\n\n/**\n * The Contact List component to display all contact\n */\nexport default function ContactList () {\n  /**\n   * Hook function to print in log after component creation\n   */\n  React.useEffect(() => {\n    console.log('The component is mounted');\n  });\n  /**\n   * The render of Contact List component with context closure\n   */\n  return (\n    <ContactsConsumer>\n      {value => {\n        return (\n          <React.Fragment>\n            <h1 className='display-5 my-4'>My Contacts : </h1>\n            {value.contacts.map((contact: IContactWithId) => (\n                <Contact \n                    key={contact.id}\n                    id={contact.id}\n                    name={contact.name}\n                    email={contact.email}\n                    tel={contact.tel}\n                    />\n            ))}\n          </React.Fragment>\n        )\n      }}\n    </ContactsConsumer>\n  );\n}\n","import * as React from 'react';\nimport { ContactsConsumer, IContactsContextState } from '../contact-context/ContactContext';\nimport { EMPTY_CONTACT } from '../../../ConstantsUtils';\n\n/**\n* The Contact interface with mandatory id \n* To manipulate Contact after creation\n*/\nexport interface IContactForm {\n    /**\n     * The history object is React props<br/>\n     * The push function is React props attribut to make redirection with ReactRouter  \n     */\n    history: {\n        push: Function\n    }\n}\n\n/**\n * Form component to add contact\n * @param props To redirect to the list page after add contact in context\n */\nexport default function ContactForm(props: IContactForm) {\n    // Add contact object in state of form\n    const [contact, setContact] = React.useState(EMPTY_CONTACT);\n    /**\n     * Funtion to accept change of Contact form\n     * @param value The value of input\n     * @param key The key of contact object to update\n     */\n    const onChange = (value: string, key: string) => {\n        let contactUpdated: any = { ...contact };\n        contactUpdated[key] = value;\n        setContact(contactUpdated);\n    };\n    /**\n     * Function to add contact in context/list\n     * @param event The submit event\n     * @param context The context to add contact\n     */\n    const onSubmit = (event: { preventDefault: Function }, context: IContactsContextState) => {\n        event.preventDefault();\n        context.dispatch({ type: 'ADD_CONTACT', payload: contact });\n        setContact(EMPTY_CONTACT);\n        props.history.push('/');\n    };\n    /**\n     * Render of ContactForm component\n     */\n    return (\n        <ContactsConsumer>\n            {context => {\n                return (\n                    <div className=\"card mb-3\">\n                        <div className=\"card-header\">Add a Contact</div>\n                        <div className=\"card-body\">\n                            <form onSubmit={(event) => { onSubmit(event, context) }}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"name\">Name</label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Name...\"\n                                        name=\"name\"\n                                        value={contact.name}\n                                        onChange={(event) => { onChange(event.target.value, 'name') }}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"name\">Email</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Email...\"\n                                        name=\"email\"\n                                        value={contact.email}\n                                        onChange={(event) => { onChange(event.target.value, 'email') }}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"tel\">Telephone</label>\n                                    <input\n                                        type=\"tel\"\n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Telephone...\"\n                                        name=\"tel\"\n                                        value={contact.tel}\n                                        onChange={(event) => { onChange(event.target.value, 'tel') }}\n                                    />\n                                </div>\n                                <input\n                                    type=\"submit\"\n                                    value=\"Add Contact\"\n                                    className=\"btn btn-block btn-primary\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                )\n            }}\n        </ContactsConsumer>\n    );\n}\n","import * as React from 'react';\n\n/**\n * The **AboutUs** component page is to explain what is the application and who make it\n */\nexport default function AboutUs () {\n  return (\n    <React.Fragment>\n      <h1 className='display-5'>About Us</h1>\n      <p className=\"lead\">This application is a Contact list of Udemy React learning</p>\n      <p className=\"author\">MGuillaumeF</p>\n      <p>Version 1.0.0</p>\n    </React.Fragment>\n  );\n}\n","import * as React from 'react';\n\n/**\n * The **Error 404** component page is to inform user of bad access pages\n */\nexport default function Error404 () {\n  return (\n    <React.Fragment>\n        <h1 className='display-5 error'>Error 404</h1>\n        <p>\n            Page not found\n        </p>\n      </React.Fragment>\n  );\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport Header from './components/header/Header';\nimport ContactList from './components/contact-components/contact-list/ContactList';\nimport { ContactsProvider } from './components/contact-components/contact-context/ContactContext';\nimport ContactForm from './components/contact-components/contact-form/ContactForm';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport AboutUs from './components/about-us/AboutUs';\nimport Error404 from './components/error-page/404/Error404';\n\nfunction App() {\n  return (\n    <ContactsProvider>\n      <Router>\n        <Header/>\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/appcontacts-react\" component={ContactList}/>\n            <Route exact path=\"/\" component={ContactList}/>\n            <Route exact path=\"/add\" component={ContactForm}/>\n            <Route exact path=\"/about\" component={AboutUs}/>\n            <Route component={Error404}/>\n          </Switch>\n        </div>\n      </Router>\n    </ContactsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}